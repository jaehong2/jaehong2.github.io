<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://jaehong2.github.io//tag/git/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jaehong2.github.io//" rel="alternate" type="text/html" />
  <updated>2021-08-06T19:01:33+09:00</updated>
  <id>https://jaehong2.github.io//tag/git/feed.xml</id>

  
  
  

  
    <title type="html">오늘의 공부기록 | </title>
  

  
    <subtitle>기록.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">rebase</title>
      <link href="https://jaehong2.github.io//git-rebase" rel="alternate" type="text/html" title="rebase" />
      <published>2021-08-01T06:00:00+09:00</published>
      <updated>2021-08-01T06:00:00+09:00</updated>
      <id>https://jaehong2.github.io//git-rebase</id>
      <content type="html" xml:base="https://jaehong2.github.io//git-rebase">&lt;h2 id=&quot;rebase&quot;&gt;rebase&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A branch에서 B branch로 합칠때 Merge or rebase를 사용한다고 한다.&lt;/li&gt;
  &lt;li&gt;Merge, rebase 실행 결과는 같다. 하지만 git history가 달라진다.&lt;/li&gt;
  &lt;li&gt;Merge는 쉽다. 안전하다. 하지만 히스토리가 지저분해질 수 있다고 한다.&lt;/li&gt;
  &lt;li&gt;Rebase는 잘 못사용시 위험 할 수 있지만 history를 깔끔하게 관리 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/git/1.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html">rebase A branch에서 B branch로 합칠때 Merge or rebase를 사용한다고 한다. Merge, rebase 실행 결과는 같다. 하지만 git history가 달라진다. Merge는 쉽다. 안전하다. 하지만 히스토리가 지저분해질 수 있다고 한다. Rebase는 잘 못사용시 위험 할 수 있지만 history를 깔끔하게 관리 할 수 있다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">remote :permission to 에러</title>
      <link href="https://jaehong2.github.io//git-permission-denied" rel="alternate" type="text/html" title="remote :permission to 에러" />
      <published>2021-01-26T06:00:00+09:00</published>
      <updated>2021-01-26T06:00:00+09:00</updated>
      <id>https://jaehong2.github.io//git-permission-denied</id>
      <content type="html" xml:base="https://jaehong2.github.io//git-permission-denied">&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    remote: Permission to test01/test01.git denied to xxx.
    fatal: unable to access 'https://github.com/test01/test01.git/': The requested URL returned error: 403
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;github 연습용 계정을 만들어서 repo 생성후 push하려는데 위와 같은 에러가 나왔다…
찾아보니&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    A 라는 github 아이디로 '최초' 글로벌 유저 등록을 했고,
    나중에 B 라는 아이디로 다시 글로벌 유저등록해서 B 아이디로 push를 진행하려 할 때,
    그 push의 시점은 여전히 A 라는 github 아이디를 찾고 있습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;라고 나와있다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html">remote: Permission to test01/test01.git denied to xxx. fatal: unable to access 'https://github.com/test01/test01.git/': The requested URL returned error: 403 github 연습용 계정을 만들어서 repo 생성후 push하려는데 위와 같은 에러가 나왔다… 찾아보니 A 라는 github 아이디로 '최초' 글로벌 유저 등록을 했고, 나중에 B 라는 아이디로 다시 글로벌 유저등록해서 B 아이디로 push를 진행하려 할 때, 그 push의 시점은 여전히 A 라는 github 아이디를 찾고 있습니다. 라고 나와있다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">error 403</title>
      <link href="https://jaehong2.github.io//git-error-403" rel="alternate" type="text/html" title="error 403" />
      <published>2021-01-03T05:01:00+09:00</published>
      <updated>2021-01-03T05:01:00+09:00</updated>
      <id>https://jaehong2.github.io//git-error-403</id>
      <content type="html" xml:base="https://jaehong2.github.io//git-error-403">&lt;!-- git error --&gt;

&lt;h2&gt;Git requested URL returned Error 403 해결방법&lt;/h2&gt;
&lt;h4&gt;발생이유&lt;/h4&gt;
&lt;p&gt;2021년 팀 스터디를 시작하기위해 목표설정을 .md파일에 적고&lt;br /&gt;
    push 하려는데 &lt;mark&gt;Git requested URL returned Error 403&lt;/mark&gt;에러가 나왔다.!두둥..&lt;br /&gt;
    서칭을 해보니 발생이유는 다양하다고 하나 나의 경우에는 접근 권한을 부여하지 않아 그런거 같았다.!&lt;br /&gt;
&lt;/p&gt;

&lt;h4&gt;해결방법&lt;/h4&gt;
&lt;p&gt;권한을 부여 받고 아래코드로 깃허브 레퍼지토리에 대한 접근 인증을 받으니 해결됬다.!&lt;br /&gt;
&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote set-url origin (git 레포 url)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;
    그리고 git 레포 url를 가지고올때 ctrl+c +v 했는데 그럴경우 &lt;br /&gt;
    &lt;mark&gt;fatal: protocol 'https' is not supported&lt;/mark&gt;에러가 발생하였다.
    붙여넣기시 그대로 문자열이 출력이되지않았다. 결론은 직접쳐보자!!
&lt;/p&gt;
&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://cheonjoosung.github.io/blog/git-push-error&quot;&gt;https://cheonjoosung.github.io/blog/git-push-error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html">Git requested URL returned Error 403 해결방법 발생이유 2021년 팀 스터디를 시작하기위해 목표설정을 .md파일에 적고 push 하려는데 Git requested URL returned Error 403에러가 나왔다.!두둥.. 서칭을 해보니 발생이유는 다양하다고 하나 나의 경우에는 접근 권한을 부여하지 않아 그런거 같았다.! 해결방법 권한을 부여 받고 아래코드로 깃허브 레퍼지토리에 대한 접근 인증을 받으니 해결됬다.! git remote set-url origin (git 레포 url) 그리고 git 레포 url를 가지고올때 ctrl+c +v 했는데 그럴경우 fatal: protocol 'https' is not supported에러가 발생하였다. 붙여넣기시 그대로 문자열이 출력이되지않았다. 결론은 직접쳐보자!! References. https://cheonjoosung.github.io/blog/git-push-error</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">브랜치(Branch)</title>
      <link href="https://jaehong2.github.io//git-basic" rel="alternate" type="text/html" title="브랜치(Branch)" />
      <published>2021-01-01T08:24:00+09:00</published>
      <updated>2021-01-01T08:24:00+09:00</updated>
      <id>https://jaehong2.github.io//git-basic</id>
      <content type="html" xml:base="https://jaehong2.github.io//git-basic">&lt;!-- git branch --&gt;

&lt;h2&gt;공부 목표&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;브랜치(Branch)에 대해 공부해보자!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;브랜치란??&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;여러 개발자들이 동시에 다양한 작업을 할 수 있게 만들어주는 기능&lt;/li&gt;
    &lt;li&gt;각자 독립적인 영역(저장소) 안에서 소스코드 변경 가능&lt;/li&gt;
    &lt;li&gt;각각의 브랜치는 다른 브랜치의 영향을 받지 않음&lt;/li&gt;
    &lt;li&gt;각각의 브랜치는 다른 브랜치와 병합(Merge)함으로 하나의 브랜치로 모을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
    메인 브랜치에서 자신의 전용 브랜치 생성 후 작업이 완료되면 메인 브랜치에
    자신의 브랜치 변경 사항 적용한다. 이렇게 함으로 독립적으로 작업 수행이 가능하고
    그결과들을 하나로 모아 나가게 할 수 있다. 그리고 작업 단위(브랜치가) 남아 있어
    문제가 발생했을 때 원인이되는 작업을 찾을 수 있다.
&lt;/p&gt;

&lt;h4&gt;master 브랜치&lt;/h4&gt;
&lt;p&gt;저장소를 처음만들면 Git은 'master'라는 이름의 브랜치를 만든다!&lt;br /&gt;
    새로운 브랜치를 만들어서 다른 브랜치를 선택(Checkout)하지 않는 이상&lt;br /&gt;
    모든 작업은 'master 브랜치'에서 이루어진다.
&lt;/p&gt;

&lt;h4&gt;브랜치 종류&lt;/h4&gt;
&lt;p&gt;&lt;mark&gt;통합 브랜치&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;통합 브랜치는 언제든 배포할 수 있는 버전을 만들 수 있어야 하는 브랜치이다.&lt;br /&gt;
    늘 안정적인 상태로 유지하는 것이 중요하다고 한다.&lt;br /&gt;
    여기서 안정적인 상태는 모든 기능이 정상적으로 작동하는 것을 말한다.&lt;br /&gt;
    일반적으로 저장소를 처음생길때 만들어진 'master' 브랜치를 통합 브랜치로 사용한다!&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;토픽 브랜치&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;기능 추가,버그 같은 단위의 작업을 위한 브랜치, 여러개의 토픽 브랜치 생성 가능!&lt;br /&gt;
    앞서 말했듯 토픽 브랜치 기능이 완성되면 통합 브랜치에 병합하는 방식으로 진행&lt;br /&gt;
    다른말로 Feature branch라고도 함!&lt;/p&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://backlog.com/git-tutorial/kr/&quot;&gt;https://backlog.com/git-tutorial/kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html">공부 목표 브랜치(Branch)에 대해 공부해보자! 브랜치란?? 여러 개발자들이 동시에 다양한 작업을 할 수 있게 만들어주는 기능 각자 독립적인 영역(저장소) 안에서 소스코드 변경 가능 각각의 브랜치는 다른 브랜치의 영향을 받지 않음 각각의 브랜치는 다른 브랜치와 병합(Merge)함으로 하나의 브랜치로 모을 수 있다. 메인 브랜치에서 자신의 전용 브랜치 생성 후 작업이 완료되면 메인 브랜치에 자신의 브랜치 변경 사항 적용한다. 이렇게 함으로 독립적으로 작업 수행이 가능하고 그결과들을 하나로 모아 나가게 할 수 있다. 그리고 작업 단위(브랜치가) 남아 있어 문제가 발생했을 때 원인이되는 작업을 찾을 수 있다. master 브랜치 저장소를 처음만들면 Git은 'master'라는 이름의 브랜치를 만든다! 새로운 브랜치를 만들어서 다른 브랜치를 선택(Checkout)하지 않는 이상 모든 작업은 'master 브랜치'에서 이루어진다. 브랜치 종류 통합 브랜치 통합 브랜치는 언제든 배포할 수 있는 버전을 만들 수 있어야 하는 브랜치이다. 늘 안정적인 상태로 유지하는 것이 중요하다고 한다. 여기서 안정적인 상태는 모든 기능이 정상적으로 작동하는 것을 말한다. 일반적으로 저장소를 처음생길때 만들어진 'master' 브랜치를 통합 브랜치로 사용한다! 토픽 브랜치 기능 추가,버그 같은 단위의 작업을 위한 브랜치, 여러개의 토픽 브랜치 생성 가능! 앞서 말했듯 토픽 브랜치 기능이 완성되면 통합 브랜치에 병합하는 방식으로 진행 다른말로 Feature branch라고도 함! References. https://backlog.com/git-tutorial/kr/</summary>
      

      
      
    </entry>
  
</feed>
