<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://jaehong2.github.io//tag/spring/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jaehong2.github.io//" rel="alternate" type="text/html" />
  <updated>2021-08-06T19:01:33+09:00</updated>
  <id>https://jaehong2.github.io//tag/spring/feed.xml</id>

  
  
  

  
    <title type="html">오늘의 공부기록 | </title>
  

  
    <subtitle>기록.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Web server failed to start. Port 8080 was already in use 에러</title>
      <link href="https://jaehong2.github.io//error1" rel="alternate" type="text/html" title="Web server failed to start. Port 8080 was already in use 에러" />
      <published>2021-08-06T02:10:00+09:00</published>
      <updated>2021-08-06T02:10:00+09:00</updated>
      <id>https://jaehong2.github.io//error1</id>
      <content type="html" xml:base="https://jaehong2.github.io//error1">&lt;h2 id=&quot;error-web-server-failed-to-start&quot;&gt;Error: Web server failed to start.&lt;/h2&gt;
&lt;h2 id=&quot;port-8080-was-already-in-use&quot;&gt;Port 8080 was already in use&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;cmd로 build와 jar 파일 실행 해보던 도중 Web server failed to start. Port 8090 was already in use 에러가 발생했다.
Intellij에서 포트를 잡고있지도 않았는데..&lt;/p&gt;

&lt;p&gt;처음에는 cmd 창에서 ctrl+c 서버가 종료 된다고 했는데 안되서 포트를 종료 하는 방법을 찾아보다..&lt;/p&gt;

&lt;p&gt;해결방법은 프롬프트(CMD)창에서&lt;br /&gt;
&lt;strong&gt;netsat-ano&lt;/strong&gt; 입력하면
&lt;img src=&quot;/assets/built/images/spring_inflearn/error1/1.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 실행중인 포트목록이 나오고 빨간색으로 그어져 있는것이 PID 프로세스 아이디?인 40676을 사용해서 종료시켜주면
완료!&lt;/p&gt;

&lt;p&gt;명령어로
taskkill /pid 8090 /f 입력시 프로세스가 종료된걸 볼 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dundung.tistory.com/148&quot;&gt;https://dundung.tistory.com/148&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Error: Web server failed to start. Port 8080 was already in use cmd로 build와 jar 파일 실행 해보던 도중 Web server failed to start. Port 8090 was already in use 에러가 발생했다. Intellij에서 포트를 잡고있지도 않았는데.. 처음에는 cmd 창에서 ctrl+c 서버가 종료 된다고 했는데 안되서 포트를 종료 하는 방법을 찾아보다..</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Spring boot 환경 설정</title>
      <link href="https://jaehong2.github.io//tomcatport" rel="alternate" type="text/html" title="Spring boot 환경 설정" />
      <published>2021-04-08T04:10:00+09:00</published>
      <updated>2021-04-08T04:10:00+09:00</updated>
      <id>https://jaehong2.github.io//tomcatport</id>
      <content type="html" xml:base="https://jaehong2.github.io//tomcatport">&lt;h2 id=&quot;프로젝트-시작-전-환경-설정&quot;&gt;프로젝트 시작 전 환경 설정&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;개발 환경 : IntelliJ, Gradle&lt;/p&gt;

&lt;p&gt;@SpringBootApplication로 선언된 class 실행시&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SpringBootApplication이 tomcat을 내장하고 있어서, springBoot와 같이 실행 된다고 함
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/4.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;bulid시 gradle을 통하여 하는 거보다 intelliJ로 java를 돌리는게 더빠르다고 함! (환경설정시 확인하기!)
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/2.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;라이브러리&quot;&gt;라이브러리&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Gradle은 의존관계가 있는 라이브러리를 함께 다운로드 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;bunlid.gradle&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모듈의 빌드 방법이 정의된 빌드 스크립트(애플리케이션 버전, 라이브러리 설정)
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/5.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 현재 3개의 library만 지정해 주었지만&lt;/p&gt;

&lt;p&gt;밑에 그림 처럼 실제로는 내가 가지고 오지않은 라이브러리들이 더 많은 걸 알수있습니다.
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/6.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 gradle이나 maven 같은 빌드 툴들은 의존 관계를 관리 해준다고 함
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/7.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;starter-web의 경우 starter-tomcat이랑도 의존 관계&lt;/li&gt;
  &lt;li&gt;이처럼 starter-web을 가지고 왔지만 starter-web과 의존 관계에 있는 라이브러리들 가지고 옴&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;톰캣-포트-번호-지정&quot;&gt;톰캣 포트 번호 지정&lt;/h3&gt;
&lt;p&gt;문제 : intellij gradle 환경에서 Run시에 톰캣이 실행되않는 오류
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/1.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아마 8080 port가 사용 중이라 포트번호를 application.properties 파일에 작성해주니 제대로 실행이 되었다.
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/3.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;로깅로그&quot;&gt;로깅(로그)&lt;/h3&gt;
&lt;p&gt;로그 파일이 따로 관리가 되고 심각한 에러가 발생시에 참고 한다고 함
Sysout 대신 log를 사용하는 습관을 들이자!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/8.jpg&quot; alt=&quot;Alt text&quot; /&gt;
slf4j는 인터페이스, 실제 로그를 어떤 구현체로 출력할지는 logback을 사용한다고함.&lt;br /&gt;
이 두가지 조합을 많이 사용한다고 함.&lt;/p&gt;

&lt;h3 id=&quot;테스트-라이브러리&quot;&gt;테스트 라이브러리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;junit5 : 테스트 라이브러리&lt;/li&gt;
  &lt;li&gt;mockito : 목 라이브러리&lt;/li&gt;
  &lt;li&gt;assertj : 테스트 코드를 좀 더 편한하게 도와주는 라이브러리&lt;/li&gt;
  &lt;li&gt;spring-test : 스프링 통합 테스트 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;view-환경설정&quot;&gt;View 환경설정&lt;/h3&gt;

&lt;h4 id=&quot;welcome-page-기능&quot;&gt;Welcome Page 기능&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features&quot;&gt;SpringBoot 문서&lt;/a&gt;
&lt;img src=&quot;/assets/built/images/spring_inflearn/spring-start/9.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정적 컨텐츠를 위한 index.html 파일을 찾는 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References.&lt;/h2&gt;
&lt;p&gt;[인프런 김영한님 강의]&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">프로젝트 시작 전 환경 설정</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">빈의 범위</title>
      <link href="https://jaehong2.github.io//Bean" rel="alternate" type="text/html" title="빈의 범위" />
      <published>2021-01-23T06:10:00+09:00</published>
      <updated>2021-01-23T06:10:00+09:00</updated>
      <id>https://jaehong2.github.io//Bean</id>
      <content type="html" xml:base="https://jaehong2.github.io//Bean">&lt;h2 id=&quot;빈bean의-범위&quot;&gt;빈(Bean)의 범위&lt;/h2&gt;
&lt;h4 id=&quot;싱글톤singleton&quot;&gt;싱글톤(SingleTon)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;컨테이너에서 생성된 Bean객체의 경우 동일한 타입에서는 한개만생성, 즉 getBean으로 호출시 동일한 객체가 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;프로토타입prototype&quot;&gt;프로토타입(ProtoType)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;싱글톤 범위와는 다르게 호출 할때마다 새로운 객체생성
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prototype&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;injectionBean&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;injectionBean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;injectionBean&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">빈(Bean)의 범위 싱글톤(SingleTon) 컨테이너에서 생성된 Bean객체의 경우 동일한 타입에서는 한개만생성, 즉 getBean으로 호출시 동일한 객체가 반환 프로토타입(ProtoType) 싱글톤 범위와는 다르게 호출 할때마다 새로운 객체생성 &amp;lt;bean id=&quot;&quot; class=&quot;&quot; scope=&quot;prototype&quot;&amp;gt; &amp;lt;constructor-arg ref=&quot;injectionBean&quot;/&amp;gt; &amp;lt;property name=&quot;injectionBean&quot; ref=&quot;injectionBean&quot;/&amp;gt; &amp;lt;/bean&amp;gt;</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">DI(Dependency Injection)</title>
      <link href="https://jaehong2.github.io//spring-di" rel="alternate" type="text/html" title="DI(Dependency Injection)" />
      <published>2020-12-29T20:45:00+09:00</published>
      <updated>2020-12-29T20:45:00+09:00</updated>
      <id>https://jaehong2.github.io//spring-di</id>
      <content type="html" xml:base="https://jaehong2.github.io//spring-di">&lt;!-- Spring 시작 --&gt;

&lt;h2&gt;공부 목표&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;DI(Dependency Injection) 알기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Spring 프레임워크&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;프레임 워크는 마치 네이게이션과 같다.&lt;/li&gt;
    &lt;li&gt;길 탐색은 네비가 하고 안내를 들은 사용자는 운전만 하면됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Spring 에서 제공하는 모듈&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;spring-core : DI, IoC 제공&lt;/li&gt;
    &lt;li&gt;aop : AOP 구현 기능 제공&lt;/li&gt;
    &lt;li&gt;jdbc : DB를 쉽게 다룰 수 있는 기능 제공&lt;/li&gt;
    &lt;li&gt;tx : 트랜젝션 관련 기능제공&lt;/li&gt;
    &lt;li&gt;webmvc : MVC구현 기능 제공&lt;/li&gt;
    &lt;li&gt;그리고 이러한 모듈을 사용하려면 .xml 파일등에 명시하면 자동으로 라이브러리를 다운받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;스프링 컨테이너(IoC)&lt;/h4&gt;
&lt;p&gt;스프링에서 객체를 생성,조립하는 컨테이너로,&lt;br /&gt;
   컨테이너를 통해 생성된 객체를 빈(Bean)이라고 부른다.
&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/built/images/spring_inflearn/spring.1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;스프링 파일 구조&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;스프링 프로젝트 Root&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;src&lt;/li&gt;
                &lt;ul&gt;
                    &lt;li&gt;main&lt;/li&gt;
                        &lt;ul&gt;
                            &lt;li&gt;java : .java파일 관리&lt;/li&gt;
                            &lt;li&gt;resources : 자원관리 폴더 .xml or property file&lt;/li&gt;
                        &lt;/ul&gt;
                &lt;/ul&gt;
            &lt;li&gt;pom.xml : 각각의 스프링프로젝트는 pom.xml 파일을 가지고있고 외부 repository에 있는 필요한 library를
                내가 개발중인 프로젝트에 쉽게 다운로드 할 수 있게 도와주는 파일이다.&lt;/li&gt;
        &lt;/ul&gt;

&lt;/ul&gt;

&lt;h4&gt;.xml 파일에서 객체 생성&lt;/h4&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id값&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;패키지명.클래스파일명&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;
    Java에서는 new 키워드를 사용해서 객체를 생성했다.&lt;br /&gt;&lt;br /&gt;
    Spring에서는 bean 태그 위에서 자동으로 객체가 생성이 되며&lt;br /&gt;
    객체가 생성됬다는건 메모리에 로드가 됬다는 이야기이고&lt;br /&gt;
    스프링에서는 메모리가 로드 된 곳을 스프링컨테이너라고 한다.
&lt;/p&gt;

&lt;p&gt;
    bean을 생성했으니 이제 java파일에서 객체를 실행시키려면&lt;br /&gt;
    1. .xml파일(컨테이너)를 생성&lt;br /&gt;
    GenericXmlApplicationContext 데이터 타입선언 후 객체생성 및 매개변수로는 .xml경로를 설정하면된다.&lt;br /&gt;
    &lt;mark&gt;GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(&quot;classpath:apllicationContext.xml&quot;);&lt;/mark&gt;&lt;br /&gt;&lt;br /&gt;

    2.컨테이너 안에있는 Bean 객체를 가져다가 쓴다.(객체생성은 컨테이너가 알아서 한다.)
    클래스명 변수명 = ctx.getBean(&quot;빈아이디&quot;, 클래스명.class);&lt;br /&gt;
    ex) TranspotationWalk trans = ctx.geBean(&quot;tWalk&quot;, TranspotationWalk.class);&lt;br /&gt;
    ctx.close //자바에서는 외부리소스 사용후 반환 해주어야한다.

&lt;/p&gt;
&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">공부 목표 DI(Dependency Injection) 알기 Spring 프레임워크 프레임 워크는 마치 네이게이션과 같다. 길 탐색은 네비가 하고 안내를 들은 사용자는 운전만 하면됨 Spring 에서 제공하는 모듈 spring-core : DI, IoC 제공 aop : AOP 구현 기능 제공 jdbc : DB를 쉽게 다룰 수 있는 기능 제공 tx : 트랜젝션 관련 기능제공 webmvc : MVC구현 기능 제공 그리고 이러한 모듈을 사용하려면 .xml 파일등에 명시하면 자동으로 라이브러리를 다운받는다. 스프링 컨테이너(IoC) 스프링에서 객체를 생성,조립하는 컨테이너로, 컨테이너를 통해 생성된 객체를 빈(Bean)이라고 부른다. 스프링 파일 구조 스프링 프로젝트 Root src main java : .java파일 관리 resources : 자원관리 폴더 .xml or property file pom.xml : 각각의 스프링프로젝트는 pom.xml 파일을 가지고있고 외부 repository에 있는 필요한 library를 내가 개발중인 프로젝트에 쉽게 다운로드 할 수 있게 도와주는 파일이다. .xml 파일에서 객체 생성 &amp;lt;bean id = &quot;id값&quot; class=&quot;패키지명.클래스파일명&quot;/&amp;gt; Java에서는 new 키워드를 사용해서 객체를 생성했다. Spring에서는 bean 태그 위에서 자동으로 객체가 생성이 되며 객체가 생성됬다는건 메모리에 로드가 됬다는 이야기이고 스프링에서는 메모리가 로드 된 곳을 스프링컨테이너라고 한다. bean을 생성했으니 이제 java파일에서 객체를 실행시키려면 1. .xml파일(컨테이너)를 생성 GenericXmlApplicationContext 데이터 타입선언 후 객체생성 및 매개변수로는 .xml경로를 설정하면된다. GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(&quot;classpath:apllicationContext.xml&quot;); 2.컨테이너 안에있는 Bean 객체를 가져다가 쓴다.(객체생성은 컨테이너가 알아서 한다.) 클래스명 변수명 = ctx.getBean(&quot;빈아이디&quot;, 클래스명.class); ex) TranspotationWalk trans = ctx.geBean(&quot;tWalk&quot;, TranspotationWalk.class); ctx.close //자바에서는 외부리소스 사용후 반환 해주어야한다. References.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">다양한 의존 주입</title>
      <link href="https://jaehong2.github.io//spring-di-2" rel="alternate" type="text/html" title="다양한 의존 주입" />
      <published>2020-12-29T20:45:00+09:00</published>
      <updated>2020-12-29T20:45:00+09:00</updated>
      <id>https://jaehong2.github.io//spring-di-2</id>
      <content type="html" xml:base="https://jaehong2.github.io//spring-di-2">&lt;!-- Spring 다양한 의존객체 주입 방법 --&gt;

&lt;h2&gt;공부 목표&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;다양한 의존객체 주입 방법에 대해 알아보자!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;생성자를 이용한 의존 객체 주입&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;assets/built/images/spring_inflearn/spring-di-1.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt; 왼쪽에 있는 자바코드를 .xml파일로 만든것이다.&lt;br /&gt;
    생성자에 객체를 주입시 constructor-arg 사용하고 ref에 참조대상을 적는다.
    즉 객체가 생성될때 studentDao 객체가 주입이된다.
&lt;/p&gt;

&lt;h4&gt;setter를 이용한 의존객체 주입&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;assets/built/images/spring_inflearn/spring-di-2.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
    위와 같이 왼쪽의 자바코드를 .xml파일로 만든것이며 &lt;br /&gt;
    만들때 property name 속성값을 적을때에 해당하는 setter 이름에서&lt;br /&gt;
    set을 때고  앞에글자를 소문자로 setJdbcUrl -&amp;gt; jdbcUrl
&lt;/p&gt;

&lt;h4&gt;@Autowired&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Spring 지원하는 어노테이션&lt;/li&gt;
    &lt;li&gt;주입하려고 하는 &lt;b&gt;객체의 타입이 일치&lt;/b&gt;하는 객체를 자동으로 주입&lt;/li&gt;
    &lt;li&gt;&lt;context:annotation-config /&gt; 구문을 꼭 xml 설정파일에 추가해야한다.&lt;/li&gt;
    &lt;li&gt;찾는 순서 : 타입 -&amp;gt; 이름 -&amp;gt; @Qualifier -&amp;gt; 실패&lt;/li&gt;
    &lt;li&gt;멤버변수, 메소드, 생성자 적용가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;@Resource&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Java에서 지원하는 어노테이션 , 프레임워크에 종속적이지 않다.&lt;/li&gt;
    &lt;li&gt;기본생성자 무조건 만들어주어야함!&lt;/li&gt;
    &lt;li&gt;이름 -&amp;gt; 타입 -&amp;gt; @Qualifier -&amp;gt; 실패&lt;/li&gt;
    &lt;li&gt;@Resource(name=&quot;&quot;)으로 직접이름지정 할 수있음&lt;/li&gt;
    &lt;li&gt;&lt;context:annotation-config /&gt; 구문을 꼭 xml 설정파일에 추가해야한다.&lt;/li&gt;
    &lt;li&gt;멤버변수, setter 메소드 ||| 생성자는 안됨!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;@Inject&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Java에서 지원하는 어노테이션 , 프레임워크에 종속적이지 않다.&lt;/li&gt;
    &lt;li&gt;타입 -&amp;gt; @Qualifier-&amp;gt; 이름 -&amp;gt; 실패&lt;/li&gt;
    &lt;li&gt;Inject를 사용하기 위해서는 maven or gradle에 javax 라이브러리 의존성 추가&lt;/li&gt;
    &lt;li&gt;java파일에서 @Inject @Named(value=&quot;id값&quot;)으로 bean객체 지정가능&lt;/li&gt;
    &lt;li&gt;멤버변수, 메소드, 생성자&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;@Qulifier&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;동일한 객체가 여러개 있을시&lt;/li&gt;
    &lt;li&gt;Autowired 사용하면 자동 주입 대상 객체를 판단하지 못해 Exception 발생&lt;/li&gt;
    &lt;li&gt;그래서 .xml bean태그안에 Qualifier태그로 value 값 명시 후  &lt;/li&gt;
    &lt;li&gt;Autowired밑에 @Qualifier(&quot;value값&quot;)지정&amp;lt;/li
&amp;lt;/ul&amp;gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">공부 목표 다양한 의존객체 주입 방법에 대해 알아보자! 생성자를 이용한 의존 객체 주입 왼쪽에 있는 자바코드를 .xml파일로 만든것이다. 생성자에 객체를 주입시 constructor-arg 사용하고 ref에 참조대상을 적는다. 즉 객체가 생성될때 studentDao 객체가 주입이된다. setter를 이용한 의존객체 주입 위와 같이 왼쪽의 자바코드를 .xml파일로 만든것이며 만들때 property name 속성값을 적을때에 해당하는 setter 이름에서 set을 때고 앞에글자를 소문자로 setJdbcUrl -&amp;gt; jdbcUrl @Autowired Spring 지원하는 어노테이션 주입하려고 하는 객체의 타입이 일치하는 객체를 자동으로 주입 구문을 꼭 xml 설정파일에 추가해야한다. 찾는 순서 : 타입 -&amp;gt; 이름 -&amp;gt; @Qualifier -&amp;gt; 실패 멤버변수, 메소드, 생성자 적용가능 @Resource Java에서 지원하는 어노테이션 , 프레임워크에 종속적이지 않다. 기본생성자 무조건 만들어주어야함! 이름 -&amp;gt; 타입 -&amp;gt; @Qualifier -&amp;gt; 실패 @Resource(name=&quot;&quot;)으로 직접이름지정 할 수있음 구문을 꼭 xml 설정파일에 추가해야한다. 멤버변수, setter 메소드 ||| 생성자는 안됨! @Inject Java에서 지원하는 어노테이션 , 프레임워크에 종속적이지 않다. 타입 -&amp;gt; @Qualifier-&amp;gt; 이름 -&amp;gt; 실패 Inject를 사용하기 위해서는 maven or gradle에 javax 라이브러리 의존성 추가 java파일에서 @Inject @Named(value=&quot;id값&quot;)으로 bean객체 지정가능 멤버변수, 메소드, 생성자 @Qulifier 동일한 객체가 여러개 있을시 Autowired 사용하면 자동 주입 대상 객체를 판단하지 못해 Exception 발생 그래서 .xml bean태그안에 Qualifier태그로 value 값 명시 후 Autowired밑에 @Qualifier(&quot;value값&quot;)지정&amp;lt;/li &amp;lt;/ul&amp;gt; References.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">스프링 개요</title>
      <link href="https://jaehong2.github.io//spring-introduce" rel="alternate" type="text/html" title="스프링 개요" />
      <published>2020-12-27T03:34:00+09:00</published>
      <updated>2020-12-27T03:34:00+09:00</updated>
      <id>https://jaehong2.github.io//spring-introduce</id>
      <content type="html" xml:base="https://jaehong2.github.io//spring-introduce">&lt;!-- Spring 시작 --&gt;

&lt;h2&gt;공부 목표&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;Spring 개요&lt;/li&gt;
    &lt;li&gt;Spring 모듈&lt;/li&gt;
    &lt;li&gt;Spring 컨테이너(IOC)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Spring 프레임워크&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;프레임 워크는 마치 네이게이션과 같다.&lt;/li&gt;
    &lt;li&gt;길 탐색은 네비가 하고 안내를 들은 사용자는 운전만 하면됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Spring 에서 제공하는 모듈&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;spring-core : DI, IoC 제공&lt;/li&gt;
    &lt;li&gt;aop : AOP 구현 기능 제공&lt;/li&gt;
    &lt;li&gt;jdbc : DB를 쉽게 다룰 수 있는 기능 제공&lt;/li&gt;
    &lt;li&gt;tx : 트랜젝션 관련 기능제공&lt;/li&gt;
    &lt;li&gt;webmvc : MVC구현 기능 제공&lt;/li&gt;
    &lt;li&gt;그리고 이러한 모듈을 사용하려면 .xml 파일등에 명시하면 자동으로 라이브러리를 다운받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;스프링 컨테이너(IoC)&lt;/h4&gt;
&lt;p&gt;스프링에서 객체를 생성,조립하는 컨테이너로,&lt;br /&gt;
   컨테이너를 통해 생성된 객체를 빈(Bean)이라고 부른다.
&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/built/images/spring_inflearn/spring.1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;스프링 파일 구조&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;스프링 프로젝트 Root&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;src&lt;/li&gt;
                &lt;ul&gt;
                    &lt;li&gt;main&lt;/li&gt;
                        &lt;ul&gt;
                            &lt;li&gt;java : .java파일 관리&lt;/li&gt;
                            &lt;li&gt;resources : 자원관리 폴더 .xml or property file&lt;/li&gt;
                        &lt;/ul&gt;
                &lt;/ul&gt;
            &lt;li&gt;pom.xml : 각각의 스프링프로젝트는 pom.xml 파일을 가지고있고 외부 repository에 있는 필요한 library를
                내가 개발중인 프로젝트에 쉽게 다운로드 할 수 있게 도와주는 파일이다.&lt;/li&gt;
        &lt;/ul&gt;

&lt;/ul&gt;

&lt;h4&gt;.xml 파일에서 객체 생성&lt;/h4&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id값&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;패키지명.클래스파일명&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;
    Java에서는 new 키워드를 사용해서 객체를 생성했다.&lt;br /&gt;&lt;br /&gt;
    Spring에서는 bean 태그 위에서 자동으로 객체가 생성이 되며&lt;br /&gt;
    객체가 생성됬다는건 메모리에 로드가 됬다는 이야기이고&lt;br /&gt;
    스프링에서는 메모리가 로드 된 곳을 스프링컨테이너라고 한다.
&lt;/p&gt;

&lt;p&gt;
    bean을 생성했으니 이제 java파일에서 객체를 실행시키려면&lt;br /&gt;
    1. .xml파일(컨테이너)를 생성&lt;br /&gt;
    GenericXmlApplicationContext 데이터 타입선언 후 객체생성 및 매개변수로는 .xml경로를 설정하면된다.&lt;br /&gt;
    &lt;mark&gt;GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(&quot;classpath:apllicationContext.xml&quot;);&lt;/mark&gt;&lt;br /&gt;&lt;br /&gt;

    2.컨테이너 안에있는 Bean 객체를 가져다가 쓴다.(객체생성은 컨테이너가 알아서 한다.)
    클래스명 변수명 = ctx.getBean(&quot;빈아이디&quot;, 클래스명.class);&lt;br /&gt;
    ex) TranspotationWalk trans = ctx.geBean(&quot;tWalk&quot;, TranspotationWalk.class);&lt;br /&gt;
    ctx.close //자바에서는 외부리소스 사용후 반환 해주어야한다.

&lt;/p&gt;
&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.inflearn.com/&quot;&gt;&lt;/a&gt;https://www.inflearn.com/&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">공부 목표 Spring 개요 Spring 모듈 Spring 컨테이너(IOC) Spring 프레임워크 프레임 워크는 마치 네이게이션과 같다. 길 탐색은 네비가 하고 안내를 들은 사용자는 운전만 하면됨 Spring 에서 제공하는 모듈 spring-core : DI, IoC 제공 aop : AOP 구현 기능 제공 jdbc : DB를 쉽게 다룰 수 있는 기능 제공 tx : 트랜젝션 관련 기능제공 webmvc : MVC구현 기능 제공 그리고 이러한 모듈을 사용하려면 .xml 파일등에 명시하면 자동으로 라이브러리를 다운받는다. 스프링 컨테이너(IoC) 스프링에서 객체를 생성,조립하는 컨테이너로, 컨테이너를 통해 생성된 객체를 빈(Bean)이라고 부른다. 스프링 파일 구조 스프링 프로젝트 Root src main java : .java파일 관리 resources : 자원관리 폴더 .xml or property file pom.xml : 각각의 스프링프로젝트는 pom.xml 파일을 가지고있고 외부 repository에 있는 필요한 library를 내가 개발중인 프로젝트에 쉽게 다운로드 할 수 있게 도와주는 파일이다. .xml 파일에서 객체 생성 &amp;lt;bean id = &quot;id값&quot; class=&quot;패키지명.클래스파일명&quot;/&amp;gt; Java에서는 new 키워드를 사용해서 객체를 생성했다. Spring에서는 bean 태그 위에서 자동으로 객체가 생성이 되며 객체가 생성됬다는건 메모리에 로드가 됬다는 이야기이고 스프링에서는 메모리가 로드 된 곳을 스프링컨테이너라고 한다. bean을 생성했으니 이제 java파일에서 객체를 실행시키려면 1. .xml파일(컨테이너)를 생성 GenericXmlApplicationContext 데이터 타입선언 후 객체생성 및 매개변수로는 .xml경로를 설정하면된다. GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(&quot;classpath:apllicationContext.xml&quot;); 2.컨테이너 안에있는 Bean 객체를 가져다가 쓴다.(객체생성은 컨테이너가 알아서 한다.) 클래스명 변수명 = ctx.getBean(&quot;빈아이디&quot;, 클래스명.class); ex) TranspotationWalk trans = ctx.geBean(&quot;tWalk&quot;, TranspotationWalk.class); ctx.close //자바에서는 외부리소스 사용후 반환 해주어야한다. References. https://www.inflearn.com/</summary>
      

      
      
    </entry>
  
</feed>
